page:
  title: notes
  subtitle: Things I learn from the real programmers.
collections:
  -
    title: 'All my notes'
    caption: ''
    date: 2014-12-15
    entries:
      -
        title: 'git flags for searching'
        body: 'Couple of helpful flags for searching. <br><code>git log -S foo</code> and <code>git log --grep foo</code><br>'
        tag: git
        url: ''
        date: 2015-03-20
      -
        title: 'bearings'
        body: 'the read write and request response directions can be confusing for me. I need to figure out what makes that disorenting for me.'
        tag: craftsmanship
        url: ''
        date: 2015-03-06
      -
        title: JQuery get class
        body: "<code>var className = $('.myclass').attr('class');</code>"
        tag: JQuery
        url: http://stackoverflow.com/a/2400396/935322
        date: 2015-03-02
      -
        title: "Craft CMS for Rails Developers"
        body: "Chat with <a href='http://www.twitter.com/iamlacroix' target='_blank'>Michael Lacroix</a> About Craft CMS<br>
          <p>I'm not a fan of PHP either...but these guys know their stuff...don't group it with shit like WordPress. It's built on a Rails-like framework. It's 'plugins' are all organized into model, controller, services, etc. that take advantage established API's within the CMS. But it's content architecture capabilities/flexibility is amazing.</p><br>
          <p>They have a free version which allows for one channel content-type (blog or similar feed), plus 5 pages.</p><br>
          <p>I've tried to avoid anything PHP-related for sooo long...but this one was way too good to ignore. </p><br>
          <p>You don't need to write any PHP either, except for your initial config...but it's super simple & is just an array you edit with database info, etc. So, no PHP really All the template files are Twig (think Ruby Liquid)</p><br>
          <p>I'm also using Forge to manage any PHP/Craft servers for clients â€“ https://forge.laravel.com/</p><br>
          <p>You could always use Heroku though too. ...but not Heroku with the free version (the $299 version includes the Amazon S3 upload feature) Anyway, with Forge you can have it manage your Digital Ocean server(s). But for something like clov3r, you could just create 1 server and have it manage a multitude of sites for you. Then just git push to your GitHub repo and it deploys. I have it track a 'production' branch so that it only deploys when I push it to that one, as oposed to 'master'</p><br>"
        tag: Rails
        url: https://demo.buildwithcraft.com/
        date: 2015-03-02
      -
        title: "Always check for JavaScript errors"
        body: "JavaScript is fluid but also brittle. As soon as you have an error in one script, it breaks the rest. So, make sure to test a few On pages that load and run multiple scripts "
        tag: what already exists?
        url: ''
        date: 2015-02-25
      -
        title: 'JavaScript Call Stack in Dev Tools'
        body: "<img src='images/notes/callstack.png'><br> On the sources tab, there's a handy view of the JavaScript Call Stack that can help you figure out where the JavaScript being run, lives. #verrynice."
        tag: Chrome Dev Tools
        url: ''
        date: 2015-02-25
      -
        title: 'git when HEAD is not origin/master'
        body: 'Just pulled a branch and even though I was in a clean state, I was getting conflicts. Turns out someone had rewritten the git history in order to clean up their repo. (Which is a valid and useful task from time to time. Their use was to remove gems in order to lower the repo size.) <br> Running <code>git reset --hard origin/master</code> was the trick.'
        tag: git
        url: ''
        date: 2015-02-25
      -
        title: 'git fetch all --prune'
        body: 'When working with remote branches they sometimes die. Add the <code>--prune</code> flag to delete any branches that are gone from the remote.'
        tag: git
        url: ''
        date: 2015-02-25
      -
        title: JavaScript Parts
        body: "<ul> <li>nuances of objects</li> <li>functional scope</li> <li>type checking</li> <li>booleans</li> <li>using length</li> <li>for loops - JS uses them a lot so you should be comfortable with how they work.</li> <li>you need to set variables before you use them. and you need to set them properly.</li> <li>the language needs a lot of core language help - like array.total</li> <li>you need to check for undefined</li> <li>you need to explicitly return things</li> <li>both sides of fork - success and fail</li> <li>being explicit with the progress path in development</li> <li>files must be loaded</li> <li>args are required in order</li> <li>functions are called with ()</li> <li>returns only fire when true</li> <li>returns happen immediately</li> <li>ajax/xhr request are asyn to keep the page moving</li> <li>cookies, local storage, and sessions are 3 different approaches to client side state management</li> </ul>"
        tag: JavaScript
        url: ''
        date: 2015-02-19
      -
        title: CURL
        body: "<p> Curl is a tool you need to know.<br> you interact with the site via the terminal<br> Flags<br><code> - X </code><br> specifies the method (-X POST)<br> <br> <code>- H</code><br> sets the header<br> <br><code> - d</code> <br> The data to send with the post<br> <br><code> - v</code><br> verbose<br> </p> "
        tag: Tools
        url: ''
        date: 2015-02-19
      -
        title: "Cutting a new gem"
        body: '<p>steps to do so<br> 1. update the change log with comments<br> 2. bump the version<br> 3. run bundle<br> 4. rake release<br> 5. bundle update in consuming app to test it.</p>'
        tag: Ruby
        url: ''
        date: 2015-02-19
      -
        title: "JavaScript Quirks"
        body: "<ul> <li>1. return object vs. __ for primatives</li> <li>2. getting objects with [] vs. '.'</li> <li>3. scope</li> <li>4. return statements</li> <li>5. setting variables with and without var</li> <li>6. need for an extra function</li> <li>7. error mgmt</li> <li>8. arguments are not an array</li> </ul>"
        tag: JavaScript
        url: ''
        date: 2015-02-19
      -
        title: 'break on Attribute Modification'
        body: "<img src='/images/notes/break.png'>"
        tag: Chrome Dev Tools
        url: ''
        date: 2015-02-18
      -
        title: 'p pry'
        body: "my pry wasn't working until Eldar showed me to 'print it' "
        tag: Ruby
        url: ''
        date: 2015-02-18
      -
        title: "Mustache partials can't call other mustache partials"
        body: "Working with mustache and finally realized that partials can't call other mustache partials. Both were in the shared directory but wouldn't play well with one another"
        tag: mustche
        url: ''
        date: 2015-02-16
      -
        title: 'too much Reduce()'
        body: "Working on a story that was missing data. I followed the path and discovered that <code>map()</code> was being used and removing everything but an <b>id</b>. It was an easy fix to simply return a hash instead of an integer. That helped me see how reduce can cut out more info than it should. Not a bug but a change in code requirements. It was the first time I had seen <code>map</code>, over reducing."
        tag: Craftsmanship
        url: ''
        date: 2015-02-09
      -
        title: "c.debug_logger = File.open('debug_output.txt', 'w')"
        body: "When the VCR tape isn't cooperating"
        tag: Testing
        url: ''
        date: 2015-02-05
      -
        title: "Don't forget to mock the method you expect to call."
        body: "Testing with VCR"
        tag: Testing
        url: ''
        date: 2015-02-04
      -
        title: "response method"
        body: "During testing, the response is available with nice methods like <code>response.body</code> and <code>response.header</code>"
        tag: Testing
        url: ''
        date: 2015-02-04
      -
        title: 'Stop using -Itest flag'
        body: "Remove the need to use the -Itest flag when running tests with minitest.<br>Add <code>export RUBYOPT=-Itest</code> to your .bash_profile. Now you can run tests with simply <code>(bundle exec) ruby test/path</code>"
        tag: Testing
        url: ''
        date: 2015-02-04
      -
        title: "Testing first is the cheapest way to code."
        body: "
        <img src='/images/notes/test_cost.png'>
        <p>Testing software is not an optional aspect to writing software. Your software will be tested (read 'used') by you, your boss, and your customers. Your task is to ensure that your code, used by other people, works. When a bug arises it will be your job to fix it. You can fix it now or you can fix it long after you have forgotten how you implemented the feature in the first place.</p>
        <br><h3>Proactive vs. Reactive workflows</h3>
        <img src='/images/notes/test_vs.png'>
        <p>It's not a matter of <em>if</em> you'll test, but a matter of <em>when</em>. You can either test pro-actively or reactively.</p>
        <br>
        <h3>Testing first is the cheapest route</h3>
          <img src='/images/notes/test_flow.png'>
          <h5>Communication</h5>
            <p>This flow is also the best way to communicate back to stakeholders. Your tests are summaries of the work you have completed and the problems you have solved.</p>
          <h5>Feature Documentation</h5>
          <p>Take advantage of all the contextual meetings and brain juice invested into understanding this feature and let your first response be writing a failing assertion. You will receive immediate feedback of failure and progress. Tests are a great place to document the new features. You will know the feature is complete when the tests pass.</p>
          <h5>Bug Spotting</h5>
          <p>Tests flush out bugs.</p>
          <h5>Technical Debt / Legacy Code</h5>
          <p>You might have technical debt when you hear these comments;</p>
          <cite>Does anyone know what this does?</cite><br>
          <cite>Why does X break when I change Z?</cite>
          <h5>Improves Quality</h5>
          <p>Quality is improved because code has to be indicative, measurable, and tested.</p>
          <p>You might think that you can't write a test for it, but you can just use it. Well, that is a short lived does of happiness. Because either that will end up breaking or you will need to modify it in some way. You are not going to write any code more complex than you will be able to test so you should write tests at the outset.</p>
        <br><h3>Things to test</h3>
        <h5>Return values</h5>
        <p>Make sure you get what you expect.</p>
        <h5>Output</h5>
        <p>Do you get a 200? Does the page contain the information you expect?</p>
        <h5>Side Effects</h5>
        <p>Is the product available for sale once you activate it?</p>
        "
        tag: 'Testing'
        url: 'http://www.slideshare.net/Skud/test-driven-development-tutorial'
        date: 2015-02-03
      -
        title: Concerns
        body: 'DHH use is the way of injecting both instance and class methods at the same time.'
        tag: rails
        url: ''
        date: 2015-01-20
      -
        title: VCR vs. Factories vs. Fixtures
        body: "Each of these is used for different purposes. "
        tag: Testing
        url: ''
        date: 2015-01-17
      -
        title: "VCR bug issues"
        body: "Hit a bug when VCR cassette was not recording. So, we<br>- opened rails console<br>- require 'vcr'<br>- ran the vcr setup helper<br>- and ran command to get the record command.<br>- This added the cassette but it had one more issue with the URL being off.<br>- Updated the url and the test passed. "
        tag: Testing
        url: ''
        date: 2015-01-15
      -
        title: Testing Tips
        body: "Comment out all but the test in focus<br> use pry to compare expectations and assertions<br> time is tricky - use something like Timecop<br> Timecop is like an environment when time is part of the test<br> assertions and expectations are two different...<br> assertions fail immediately<br> expectation failures happen down the road when you call / don't call something.<br> Mocha is mock framework for minitest.<br> refer to source code to setup tests.<br> "
        tag: Testing
        url: ''
        date: 2015-01-13
      -
        title: TimeCop
        body: 'Timecop.freeze<br>Time.use_zone("Paris")<br>'
        tag: Testing
        url: 'https://github.com/travisjeffery/timecop'
        date: 2015-01-13
      -
        title: Mocking minitest
        body: "<b>unexpected invocation</b> - happens when my method is called with the wrong content.<br><b>unsatisfied expectations</b> - happens when a method I expected to fire, doesn't.<br>Success when a method and proper data are both called correctly"
        tag: Testing
        url: ''
        date: 2015-01-13
      -
        title: Re-Read these books in 2015
        body: "I want catch things I missed the first time I read these books. I want to start with fundamental language after spending to pick up basic language constructs and other minor details. Then, move into suggestions for application. Lastly look at the most abstract topics and see if they make sense now :-)<br>
          <br><h2>Fundamentals</h2>
          Programming Ruby<br>
          Rails Recipes<br>
          Agile Web Development With Rails<br>
          Ruby Cookbook<br>
          Eloquent Ruby<br>
          Pragmatic Programmer<br>
          Rails 3 Way<br>
          Well Grounded Rubyist<br>
          Simply Javascript<br>
          Javascript Definitive Guide<br>
          Javascript Ninja<br>
          Learning Jquery<br>
          Ng-book<br>
          Linux Command Line<br>

          <br><h2>Application</h2>
          Everday Scripting With Ruby<br>
          Metaprogramming Ruby<br>
          Crafting Rails Apps<br>
          Hight Performance Javascript<br>
          Hight Performance Web Sites<br>
          Rails Antipatterns<br>

          <br><h2>Design & Development</h2>
          Design Patterns In Ruby<br>
          Practical Object Oriented Design In Ruby<br>
          Javascript Patterns<br>
          Working With Unix Processes<br>
          Design Patterns<br>
          Algorithms<br>
          Test Driven Development By Example<br>
          Don't Make Me Think<br>
          Extreme Programming
        "
        tag: Craftsmanship
        url: ''
        date: 2015-01-12
      -
        title: Regular Expressions
        body: "Regular Expressions is a language designed to help manage the English language.It concerns itself with for topics: Selecting text, the position of text, grouping text, and whitespace."
        tag: Regex
        url: ''
        date: 2015-01-11
      -
        title: "Some things to study..."
        body: "sinatra<br> rack<br> warden<br> puma"
        tag: progress
        url: ''
        date: 2015-01-10
      -
        title: create methods to use instead of working with data
        body: "example<br>
        <code>def cog</code><br>
        &nbsp;<code>@cog</code><br>
        <code>end</code><br>
        Insted of just calling<code>@cog</code> directly.
        "
        tag: craftsmanship
        url: ''
        date: 2015-01-10
      -
        title: Design Patterns
        body: "Encapsulate what varies<br> Favor composition over inheritance<br> Program to an interface. (Not to an implementation.)<br> strive for loosly coupled designs<br> Classes should be open to extension, but closed for modification<br> a class should have only one reason to change.<br> <h2>Study these patterns</h2> strategy<br> observer<br> decorator<br> singleton<br> state<br> iterator<br>factory"
        tag: craftsmanship
        url: ''
        date: 2015-01-10
      -
        title: "Ruby's Include vs. Extend"
        body: "<b>Include</b> makes methods instance methods.<br> <b>Extend</b> makes class methods. "
        tag: ruby
        url: ''
        date: 2015-01-10
      -
        title: Variables in Bash
        body: "<code>export NAME='Dave'</code><br>"
        body: "<code>echo $NAME</code>"
        tag: bash
        url: ''
        date: 2015-01-10
      -
        title: Ruby Method Definitions
        body: "<b>Signature</b> is the name of the method and parameters it defines.<br> <b>Parameters</b> are the placeholders for arguments.<br> <b>Arguments</b> are the actual values that get passed into the parameters.<br>"
        tag: ruby
        url: ''
        date: 2015-01-10
      -
        title: Ruby Structs
        body: "<code>drink = Struct.new(:size, :temp)</code><br><code>coffee = drink.new('tall', 'cold')</code><br>"
        tag: ruby
        url: ''
        date: 2015-01-10
      -
        title: helpful ruby methods
        body: "<code>is_a?()</code><br> <code>instance_of()</code><br> <code>ancestors</code><br>"
        tag: ruby
        url: ''
        date: 2015-01-10
      -
        title: git shortlog
        body: 'TODO'
        tag: git
        url: ''
        date: 2015-01-10
      -
        title: "Methods with redundant arguments should be moved into the initializer"
        body: ''
        tag: ruby
        url: ''
        date: 2015-01-10
      -
        title: "<code>.on('click', '.filter > span', () ->)</code>"
        body: 'adding the second argument to the click function will keep the event as live update.'
        tag: JQuery
        url: ''
        date: 2015-01-10
      -
        title: "Coffeescript's fat arrow <code>=></code>"
        body: 'Pushes <code>this</code> into next function.'
        tag: javascript
        url: ''
        date: 2015-01-10
      -
        title: "Underscore's <code>_.template</code> uses the 'erb' (<code><%= %></code>)syntax as template."
        body: ''
        tag: javascript
        url: ''
        date: 2015-01-10
      -
        title: 'make background fill element put<br>top:0<br>bottom:0'
        body: body
        tag: CSS
        url: ''
        date: 2015-01-10
      -
        title: "typeof foo != 'undefined'"
        body: the nil check of JavaScript
        tag: javascript
        url: ''
        date: 2015-01-10
      -
        title: "background-size: 100% 100%"
        body: 'stretches property to fit the container'
        tag: CSS
        url: ''
        date: 2015-01-10
      -
        title: "<code>window.screen</code> methods"
        body: "<code>.width</code><br> <code>.height</code><br> <code>.availWidth</code><br> <code>.availHeight</code><br> <code>.colorDepth</code><br> <code>.pixelDepth</code><br>"
        tag: javascript
        url: 'http://www.w3schools.com/js/js_window_screen.asp'
        date: 2015-01-10
      -
        title: "<code>window.navigator</code> methods"
        body: "<code>.appName</code> return the name of the browse<br> IE11, Chrome, Firefox, and Safari return appName 'Netscape'.<br> <code>.appCodeName</code> return the name of the browse<br> Chrome, Firefox, IE, Safari, and Opera all return appCodeName 'Mozilla'<br> <code>.platform</code> returns the browser platform (operating system)<br> <h2>Warning !!!</h2><br> The information from the navigator object can often be misleading, and should not be used to detect browser versions because:<br> Different browsers can use the same name<br> The navigator data can be changed by the browser owner<br> Some browsers misidentify themselves to bypass site tests<br> Browsers cannot report new operating systems, released later than the browser<br> <code>.cookieEnabled</code> returns true if cookies are enabled, otherwise false<br> <code>.language</code> returns the browser's language.<br> <code>.javaEnabled()</code><br> returns true if Java is enabled"
        tag: javascript
        url: 'http://www.w3schools.com/js/js_window_navigator.asp'
        date: 2015-01-10
      -
        title: "<code>window.history</code> methods"
        body: "<code>history.back()</code> same as clicking back in the browser<br> <code>history.forward()</code> same as clicking forward in the browser"
        tag: javascript
        url: 'http://www.w3schools.com/js/js_window_history.asp'
        date: 2015-01-10
      -
        title: "<code>window.location</code> methods"
        body: "
          <code>.href</code> returns the href (URL) of the current page<br>
          <code>.hostname</code> returns the domain name of the web host<br>
          <code>.pathname</code> returns the path and filename of the current page<br>
          <code>.protocol</code> returns the web protocol used (http:// or https://)<br>
          <code>.assign</code> loads a new document."
        tag: javascript
        url: 'http://www.w3schools.com/js/js_window_location.asp'
        date: 2015-01-10
      -
        title: '<code>isNaN()</code>'
        body: 'check to see if a calculation resulted in Not a number.'
        tag: javascript
        url: ''
        date: 2015-01-10
      -
        title: 'history | grep -curl'
        body: 'look at last time used -curl in history.'
        tag: git
        url: ''
        date: 2015-01-10
      -
        title: git reset -hard
        body: 'starts over'
        tag: git
        url: ''
        date: 2015-01-10
      -
        title: "Controllers have <code>before_action</code><br>Models have <code>before_save</code> and <code>before_validation</code>."
        body: ''
        tag: Rails
        url: ''
        date: 2015-01-10
      -
        title: How to debug anything
        body: "Notes from a <a href='https://www.youtube.com/watch?v=VV7b7fs4VI8' target='_blank'>James Golic's talk</a> (RIP)<br> Use strace<br> System trace<br> System call<br> Learn about it in the <code>man 2</code><br> <h2>Steps</h2><br> 1. formulate a hypothesis<br> 2. Test it<br> 3. Fix it.<br><br> <h2>Tips</h2><br> 1. Forget everything you think you know<br> 2. Get a third party opinion<br> 3. Locat the correct source code.<br> 4. Identify hard coded string to grep for.<br> 5. Stare at the code until it makes sense.<br> 6. Fix whatever is broken."
        tag: craftsmanship
        url: ''
        date: 2015-01-10
      -
        title: "has a vs. is a vs. behaves like a"
        body: 'has a - composition<br>is a - inheritance<br>behaves like a - modules with duck typing.'
        tag: OOD
        url: ''
        date: 2015-01-10
      -
        title: Single Responsibility Principal
        body: 'TODO put it here.'
        tag: OOD
        url: ''
        date: 2015-01-10
      -
        title: composition
        body: 'TODO put it here.'
        tag: OOD
        url: ''
        date: 2015-01-10
      -
        title: "Test the interface, not the implementation"
        body: ''
        tag: Testing
        url: ''
        date: 2015-01-10
      -
        title: List of SCSS goodies to know.
        body: "@extend<br>$variables<br>@mixin<br>@include<br>@if<br>@else<br>@for<br>@each<br>@mixin<br>@content"
        tag: CSS
        url: ''
        date: 2015-01-10
      -
        title: "rego {./lib/path/to/file.rb,./another/path/to/file.rb} -- bundle exec ruby -Itest test/this_test.rb -n /yyy/"
        body: "Rego Example with a specific file highlighted using ruby's regex flad (-n)"
        tag: GEM
        url: "https://github.com/ahoward/rego"
        date: 2015-01-09
      -
        title: '<code>head -10 data.csv</code>'
        body: 'check the first 10 lines of an import'
        tag: bash
        url: ''
        date: 2015-01-08
      -
        title: '<code>grep foo development.log</code>'
        body: 'look for the instances where foo was in the logs.'
        tag: bash
        url: ''
        date: 2015-01-08
      -
        title: 'Make sure to check that the data set you are working with is accurate.'
        body: 'Example; CSV file columns in the wrong order.'
        tag: craftsmanship
        url: ''
        date: 2015-01-08
      -
        title: Redis is not an HTTP call
        body: "Redis runs on it's own port and has it's own language."
        tag: Databases
        url: 'http://redis.io/documentation'
        date: 2015-01-06
      -
        title: "<code>parseInt(#, 10)</code>"
        body: "Get just the number. Make sure to add the 10 to get the right number."
        tag: javascript
        url: ''
        date: 2015-01-05
      -
        title: "The query String"
        body: "The URL can add details with ? and &. More details about this later..."
        tag: Browsers
        url: ''
        date: 2015-01-05
      -
        title: "Insert a line break using CSS"
        body: "<code>.foo:before { content: '\\A'; }</code>"
        tag: CSS
        url: 'http://www.stackoverflow.com/a/11750985/935322'
        date: 2015-01-03
      -
        title: Key Frame practice
        body: "<html> <head> <title>fire</title> <link href='http://fonts.googleapis.com/css?family=Lato:400,700,900,400italic|Oswald:400,300' rel='stylesheet' type='text/css'> <style type='text/css'> .body2 {font-family: Lato, sans-serif; font-weight: 900; padding: 0; margin: 0; -webkit-animation: breath 3s linear infinite alternate; } .body2 .container {width: 40%; padding: 2em; } .body2 .fire {font-size: 3em; text-align: right; float: left; width: 50%; font-family: Lato, sans-serif; font-weight: 700; -webkit-animation: breath-text, fire-text; -webkit-animation-duration: 2s, .5s; -webkit-animation-iteration-count: infinite, 1; -webkit-animation-direction: alternate, normal; -webkit-animation-delay: 2s, 1.5s; -webkit-animation-fill-mode: both; } .body2 p { -webkit-animation: slide-text .25s ease 3s 1 both; } .body2 a { color: #65bfd2; } .body2 .footnote {font-weight: 400; color: white; width: 100%; text-align: right; padding-top: 35px; padding-right: 5px; background: rgba(0,0,0,0.2); height: 100px; -webkit-animation: moveup 2s ease 1s 1 both; } @-webkit-keyframes breath {0%   { background-color: #ffff66; } 20%  { background-color: #edf0c5; } 50%  { background-color: #e5c465; } 70%  { background-color: #e17052; } 100% { background-color: #edd05f; } } @-webkit-keyframes breath-text {0%    { color: #f0da3b; } 20%   { color: #ffff75; } 80%   { color: #edf0c5; } 90%   { color: #bebea4; } 100%  { color: #ffff66; } } @-webkit-keyframes moveup {from {opacity: 0; bottom: -135px; } to  {opacity: 1; bottom: 0px; } } @-webkit-keyframes slide-text {from {opacity: 0; padding-right: 90px; } to   {opacity: 1; padding-right: 120px; } } @-webkit-keyframes fire-text {from {opacity: 0; padding-top: 20px; } to   {opacity: 1; padding-top: 0px; } } </style> </head> <div class='body2'> <div class='container'> <div class='content'> </div> </div> <div class='footnote'> <div class='fire'>fire</div> <p> a CSS3 animation exercise.. </p> </div> </div> </html>"
        tag: CSS
        url: 'https://github.com/woodall/notes/blob/gh-pages/fire.html'
        date: 2014-05-19
      -
        title: CSS Flip transition
        body: "<html> <head> <title>An exercise in 3d transforms</title> <style type='text/css'> .body {background: #ffcc66; font-family: arial; text-transform: uppercase; text-align: center; font-size: 5em; padding: 0.2em; } .body h1 {margin-top: 0.3em; } .body .front {background: #ffcc66; border: 2px dashed #d15252; color: #d15252; } .body .back {background: #d15252; color: #ffcc66; } .body .wrapper {width: 300px; height: 300px; margin: 2em auto; position: relative; background: #af4545; box-shadow: inset 0px 0px 2px 1px #712c2c; -webkit-perspective: 800px; cursor: pointer; } .body .card {width: 300px; height: 300px; -webkit-transition: -webkit-transform 0.85s; -webkit-transform-style: preserve-3d; } .body .card:hover {-webkit-transform: rotateY(360deg); } .body .back {-webkit-transform: rotateY(180deg); } .body .side {width:100%; height:100%; position:absolute; display: block; -webkit-backface-visibility: hidden; -moz-backface-visibility: hidden; -o-backface-visibility: hidden; backface-visibility: hidden; } </style> </head> <div class='body'> <div class='ground'> <div class='wrapper'> <div class='card'> <div class='front side'> <h1>L</h1> </div> <div class='back side'> <h1>O</h1> </div> </div> </div> </div> </div> </html> "
        tag: CSS
        url: 'https://github.com/woodall/notes/blob/gh-pages/flipper.html'
        date: 2014-05-19
      -
        title: prune pr
        body: TODO - get this
        tag: git
        url: ''
        date: 2015-01-01
      -
        title: "304 means cached Asset"
        body: ''
        tag: HTTP
        url: ''
        date: 2015-01-01
      -
        title: "JavaScript posts I'd like to write."
        body: "
            - live binding<br>
            - return gotchas<br>
            - top 20 events you should know<br>
            - top 10 javascript quirks<br>
            - object creation patterns"
        tag: javascript
        url: ''
        date: 2015-01-01
      -
        title: nil management is an iterative process
        body: ask questions about the data
        tag: craftsmanship
        url: ''
        date: 2015-01-01
      -
        title: $httpBackend needs an afterEach()
        body: relates to testing Angular
        tag: Angular
        url: ''
        date: 2015-01-01
      -
        title: "Add IP address to Windows IE"
        body: "
        - :c windows<br>
        - System 32<br>
        - drives<br>
        - etc<br>
        - hosts<br>
        - note pad<br>
        - run notepad as an admin<br>
        - open open notepad<br>
        - in terminal, run ifconfig -a and look for 10:36:... to find IP address
        "
        tag: IE
        url: ''
        date: 2015-01-01
      -
        title: Defensive Coding
        body: "Experience will teach a level of nil checks and type checkings. Depending on the level of uncertainty and confidence in the data set you're dealing with."
        tag: craftsmanship
        url: ''
        date: 2015-01-01
      -
        title: git co -T foo/branch
        body: "after you fetch all, you can jump onto a branch you haven't used yet."
        tag: git
        url: ''
        date: 2015-01-01
      -
        title: nth & last-child
        body: "<code>li:last-child</code>&nbsp; I tend to confuse last child's use and put it on the last child of the parent, but you actually use the pseudo class :last-child on the child element.<br>
          <code>li:nth-child(3n)</code>&nbsp; Doing some cool calculations.<br>
          TODO: Talk with Steve Dugas about the site he uses for some help.
          "
        tag: CSS
        url: ''
        date: 2015-01-01
      -
        title:  Jquery methods
        body: "
          <code>.offset()</code>&nbsp; top left of the window.<br>
          <code>.position()</code>&nbsp; Relative to the container.<br>
          <code>.scrollTop(45)</code>&nbsp; a number without pixels.<br>
          <code>.closest()</code>&nbsp; Walis up the dom rather than doing .parent().parent<br>
          "
        tag: JQuery
        url: ''
        date: 2015-01-01
      -
        title: .initialize
        body: "This was the first method that helped me see that various words had extra power and unique roles in the process. This method has been written to begin a new object with certain content. A powerful role in an object's life cycle."
        tag: ruby
        url: ''
        date: 2015-01-01
      -
        title: .push
        body: An array method to push people in the stuff of the line.
        tag: ruby
        url: ''
        date: 2015-01-01
      -
        title: .method_missing
        body: A key to meta programming
        tag: ruby
        url: ''
        date: 2015-01-01
      -
        title: .find
        body: TODO look into this one
        tag: ruby
        url: ''
        date: 2015-01-01
      -
        title: .map
        body: the return value of an array is the new array
        tag: ruby
        url: ''
        date: 2015-01-01
      -
        title: .inject
        body: start with a value
        tag: ruby
        url: ''
        date: 2015-01-01
      -
        title: Traversing
        body: "This is about finding code by following the trail. You don't just hunt and peck but you take a method and see who calls it then you go to the next place until you find what you need to do."
        url: ''
        tag: code
        date: 2014-12-28
      -
        title: coercion
        body: "Coercion is the task of converting data into the format you need. This is moving from JSON to a Ruby Hash. Or a symbol to a string. Or a string to an integer. Or an integer to a Date.<br><br>Data has to be in the proper format or the computer blows up. This is part of the job."
        url: ''
        tag: code
        date: 2014-12-28
      -
        title: Strict mode
        body: "Quotes from Eloquent JavaScript<br><cite>JavaScript can be made a little more strict by enabling strict mode. This is done by putting the string 'use strict;' at the top of a file or a function body. Hereâ€™s an example:</cite><br>
        <code>
        function canYouSpotTheProblem() {<br>
        &nbsp;&nbsp;'use strict';<br>
        &nbsp;&nbsp;for (counter = 0; counter < 10; counter++)<br>
        &nbsp;&nbsp;console.log('Happy happy');<br>
        }<br>
        <br>
        canYouSpotTheProblem();<br>
        // â†’ ReferenceError: counter is not defined<br>
        </code>
        <cite>
        Normally, when you forget to put var in front of your variable, as with counter in the example, JavaScript quietly creates a global variable and uses that. <br><br>
        In strict mode, however, an error is reported instead. This is very helpful. It should be noted, though, that this doesnâ€™t work when the variable in question already exists as a global variable, but only when assigning to it would have created it.<br><br>
        Another change in strict mode is that the this binding holds the value undefined in functions that are not called as methods. When making such a call outside of strict mode, this refers to the global scope object. So if you accidentally call a method or constructor incorrectly in strict mode, JavaScript will produce an error as soon as it tries to read something from this, rather than happily working with the global object, creating and reading global variables.
        </cite>
        "
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        title: instanceof
        body: "A binary operator useful to know whether an object was derived from a specific constructor. <br> <code>a = [];<br>a instanceof Array;<br> // â†’ true<br> </code> Almost every object is an instance of Object so be aware"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/06_object.html#p_4sWuvx6wkg'
        date: 2014-12-27
      -
        title: The get and set methods
        body: "<code>var pile = {<br> &nbsp;&nbsp;elements: ['eggshell', 'orange peel', 'worm'],<br> &nbsp;&nbsp;get height() {<br> return this.elements.length;<br> &nbsp;},<br> &nbsp;&nbsp;set height(value) {<br> &nbsp;console.log('Ignoring attempt to set height to', value);<br> &nbsp;&nbsp;}<br> };<br> <br> console.log(pile.height);<br> // â†’ 3<br> pile.height = 100;<br> // â†’ Ignoring attempt to set height to 100<br> </code> <cite>In object literal, the `get` or `set` notation for properties allows you to specify a function to be run when the property is read or written.</cite>"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        title: Object.keys()
        body: Returns an array of property names in the object
        tag: javascript
        url: ''
        date: 2014-12-27
      -
        title: "hasOwnProperty()"
        body: "<cite>This method tells us whether the object itself has the property, without looking at its prototypes. This is often a more useful piece of information than what the in operator gives us.<br>When you are worried that someone (some other code you loaded into your program) might have messed with the base object prototype, I recommend you write your for/in loops like this:</cite>
            <br><code>for (var name in map) {
              <br> &nbsp;&nbsp;if (map.hasOwnProperty(name)) {
              <br> &nbsp;&nbsp;// ... this is an own property
            <br> &nbsp;}
            <br> }
            <br> </code>
          "
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        title: "Enumerable vs. NonEnumerable"
        body: "JavaScript distinguishes between enumerable and nonenumerable properties.<br><br>Quotes from Eloquent JavaScript<br><cite>All properties that we create by simply assigning to them are enumerable. The standard properties in `Object.prototype` are all nonenumerable, which is why they do not show up in such a for/in loop.</cite><br> <cite>It is possible to define our own nonenumerable properties by using the `Object.defineProperty` function, which allows us to control the type of property we are creating.</cite><br> <code> Object.defineProperty(Object.prototype, 'hiddenNonsense', {enumerable: false, value: 'hi'});<br> for (var name in map)<br> console.log(name);<br> // â†’ pizza<br> // â†’ touched tree<br> console.log(map.hiddenNonsense);<br> // â†’ hi<br> </code> <cite>So now the property is there, but it wonâ€™t show up in a loop. Thatâ€™s good. But we still have the problem with the regular in operator claiming that the Object.prototype properties exist in our object. For that, we can use the objectâ€™s hasOwnProperty method.</cite><br>"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        title: 'for/in values are strings.'
        body: "<code> var user = { <br> name: 'dave',<br> age: 37,<br> blam: function(){}<br> }<br> </code> for / in returns a loop.<br> <code> for (p in user) {<br> console.log(p);<br> console.log(user[p]);<br> }<br> </code> <i>in</i> is a boolean. <i>NOTE</i> all properties are checked as a string.<br> <code> var c = 'blam' in user;  // blam is a function<br> console.log(c);<br> </code>"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/06_object.html#p_FtECKQ2UPV'
        date: 2014-12-27
      -
        title: "getPrototypeOf()"
        body: "Starting to notice that JavaScript needs me to interact with the Object parent to obtain certain information.<br>Quotes from Eloquent JavaScript<br> <code> console.log(Object.getPrototypeOf({}) == Object.prototype);<br> // â†’ true<br> console.log(Object.getPrototypeOf(Object.prototype));<br> // â†’ null<br> </code> <cite>As you might expect, the Object.getPrototypeOf function returns the prototype of an object.<br> The prototype relations of JavaScript objects form a tree-shaped structure, and at the root of this structure sits Object.prototype. It provides a few methods that show up in all objects, such as toString, which converts an object to a string representation.</cite>"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        title: "Calling methods on null properties"
        body: "Quotes from Eloquent JavaScript<br><cite>But often, your nonsense computation will simply produce a NaN (not a number) or undefined value. And the program happily continues, convinced that itâ€™s doing something meaningful. The mistake will manifest itself only later, after the bogus value has traveled though several functions. It might not trigger an error at all but silently cause the programâ€™s output to be wrong. Finding the source of such problems can be difficult.</cite>"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        title: "Why use Object.create verse just normal {}"
        body: "Quotes from Eloquent JavaScript<br><cite>You can use Object.create to create an object with a specific prototype. <br>We saw the Object.create function, which allows us to create an object with a specific prototype. You are allowed to pass null as the prototype to create a fresh object with no prototype. For objects like map, where the properties could be anything, this is exactly what we want.</cite><br> <code> var map = Object.create(null);<br> map['pizza'] = 0.069;<br> console.log('toString' in map);<br> // â†’ false<br> console.log('pizza' in map);<br> // â†’ true<br> </code><br><cite>Now we can safely use for/in loops, no matter what people have been doing to Object.prototype.</cite>"
        tag: javascript
        url: 'http://www.eloquentjavascript.net/'
        date: 2014-12-27
      -
        tag: git
        title: "$ git branch -d the_local_branch"
        body: 'Deletes a local branch'
        url: 'http://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote'
        date: 2014-12-23
      -
        tag: sublime
        title: "Close all tabs at once."
        body: 'Preferences > Key Bindings > User <br><code>{ "keys": ["super+shift+w"], "command": "close_all" }</code>'
        url: 'http://stackoverflow.com/a/13561797/935322'
        date: 2014-12-23
      -
        tag: rails
        title: "Instance variables don't pass from gems."
        body: "Use a hash or method call instead."
        url: ''
        date: 2014-12-23
      -
        tag: ruby
        title: "#merge to add to a hash"
        body: "Say <code>foo = {'a' => 1}</code> <br> Use <code>foo.merge('b' => 2)</code>. <br>So that foo is now <code>{'a' => 1, 'b'=> 2}</code>"
        url: ''
        date: 2014-12-23
      -
        tag: CSS
        title: add a class to the parent
        body: Promote reuse by adding classes to parent nodes.
        url: ''
        date: 2014-12-22
      -
        date: 2014-12-17
        tag: ruby
        title: "assert_select"
        sub-title: ''
        body: 'An assertion that selects elements and makes one or more equality tests.Example<br><pre class="ruby" data-result="[object Object]" data-second_best="[object Object]"><code><span class="identifier">assert_select</span> <span class="string">"ol"</span> <span class="identifier"><span class="keyword">do</span></span> |<span class="identifier">elements</span>| <br><span class="identifier">elements</span>.<span class="identifier"><span class="keymethods">each</span></span> <span class="identifier"><span class="keyword">do</span></span> |<span class="identifier">element</span>| <br><span class="identifier">assert_select</span> <span class="identifier">element</span>, <span class="string">"li"</span>, <span class="number">4</span> <span class="identifier"><span class="keyword"><br>end</span></span> <span class="identifier"><span class="keyword"><br>end</span></span> </code></pre>'
        url: 'http://api.rubyonrails.org/classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select'
      -
        date: 2014-12-17
        tag: JQuery
        title: "$(\"a[href*='travel']\")"
        sub-title: ''
        body: 'find a tags that href has travel in it.'
        url: ''
      -
        date: 2014-12-17
        tag: CSS
        title: 'display: table-cell'
        sub-title: ''
        body: 'Gives table rules, like vertical height.'
        url: ''
      -
        date: 2014-12-08
        tag: CSS
        title: 'css strategy'
        sub-title: ''
        body: 'Think of classes as cousins and be more generic enough to be reused. They are more similar than I realize.'
        url: ''
      -
        date: 2014-12-08
        title: 'test a POST'
        body: '$.post("/path/to/endpoint",{ test: 1});'
        url: ''
        sub-title: ''
        tag: code
      -
        date: 2014-12-02
        tag: code
        title: 'Cron jobs'
        body: 'Scheduled jobs.'
        url: ''
        sub-title: ''
      -
        date: 2014-12-02
        tag: code
        title: 'Background jobs'
        state:
        body: 'Things that work with apps like sidekiq and resque'
        url: ''
        sub-title: ''
      -
        date: 2014-12-02
        tag: code
        body: 'during each project ask myself to find something that should be refactored. what this will do will encourage me to dig around the gems or files I used.'
        sub-title: ''
        title: 'how to refactor'
        url: ''
      -
        date: 2014-12-02
        tag: code
        title: '2 ways to use return'
        sub-title: ''
        body: 'there are two views on how to use return. 1.) return at the end of the function. 2.) early exit.'
        url: ''
      -
        date: 2014-12-02
        body: "During the story I'm working on, consider looking at the gems to know them. This will help understand the environment and help me find things that need to be refactored later."
        sub-title: ''
        title: 'constructive wandering'
        url: ''
        tag: code
      -
        tag: Testing
        title: '<code>ruby -Itest test/models/file_test.rb  -n /zz/</code>'
        subtitle: ''
        body: "Run a single test with the -n flag and an reg expression"
        url: ''
        date: 2014-12-19
        state: ''
      -
        tag: git
        title: 'copr [1234]'
        subtitle: ''
        body: "Fetch a remote PR to a local branch by <a href='https://twitter.com/gregvaughn'>Greg Vaughn</a>.<br><em>In .bash_[profile]</em><br><code>copr() { <br> &nbsp;&nbsp;git fetch origin refs/pull/$1/head:pull-request-$1<br>&nbsp;&nbsp;git co pull-request-$1<br> }</code>"
        url: ''
        date: 2014-12-19
        state: ''
      -
        tag: bash
        title: '<code>tar cfvz [name_of_zipped_version_of_file.tgz] [file that you are zipping]</code>'
        subtitle: ''
        body: "Zip a file from the terminal </br>The Zipped file needs to end with .tgz </br><b>Example;</b> 'tar cfvz myZippedFile.tgz BigFile' </br>cfvz stands for: create file verbose zip"
        url: ''
        date: 2014-12-19
        state: ''
      -
        tag: bash
        title: '<code>tail -f development.log | grep user</code>'
        subtitle: ''
        body: 'live read of the file in question, ex- development.log. Using grep I can look for log enteries that only have user in them.'
        url: ''
        date: 2014-12-02
        state: ''
      -
        tag: bash
        title: '<code>find ./source/notes ./source/blog -type f -print0 | xargs -0 stat -f "%m %N" | sort -rn | head -3 | cut -f2- -d" "</code>'
        subtitle: ''
        body: 'Recursively find the last updated files'
        url: ''
        date: 2014-11-29
        state: ''
      -
        tag: bash
        title: 'alias gpom="git pull origin master"'
        subtitle: ''
        body: save yourself from typing sooo much
        url: ''
        date: 2014-12-02
        state: ''
      -
        tag: git
        title: 'gcob'
        subtitle: ''
        body: 'git checkout branch [branch name]'
        url: ''
        date: 2014-12-02
        state: ''
      -
        tag: git
        title: 'git log -S [word]'
        subtitle: ''
        body: 'the -S is a regex that will look for the word used in the log'
        url: ''
        date: 2014-12-02
        state: ''
      -
        tag: git
        title: 'git log [file name]'
        subtitle: ''
        body: 'shows changes only for file name'
        url: ''
        date: 2014-12-02
        state: ''
      -
        tag: bundle
        title: 'bundle open [gem]'
        subtitle: ''
        body: 'will open the gem in question'
        url: ''
        date: 2014-11-02
        state: ''
