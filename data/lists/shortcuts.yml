page:
  title: shortcuts
  subtitle: Things I learn from the real programmers.
list:
  -
    tag: testing
    title: 'ruby -Itest test/models/name_of_file_controller_test.rb  -n /zz/'
    subtitle: ''
    body: "Run a single test with the -n flag and an reg expression"
    url: ''
    date: 2014-12-19
    state: ''
  -
    tag: git
    title: 'copr [1234]'
    subtitle: ''
    body: "Fetch a remote PR to a local branch by <a href='https://twitter.com/gregvaughn'>Greg Vaughn</a>.<br><em>In .bash_[profile]</em><br><code>copr() { <br> &nbsp;&nbsp;git fetch origin refs/pull/$1/head:pull-request-$1<br>&nbsp;&nbsp;git co pull-request-$1<br> }</code>"
    url: ''
    date: 2014-12-19
    state: ''
  -
    tag: bash
    title: 'tar cfvz [name_of_zipped_version_of_file.tgz] [file that you are zipping]'
    subtitle: ''
    body: "Zip a file from the terminal </br>The Zipped file needs to end with .tgz </br><b>Example;</b> 'tar cfvz myZippedFile.tgz BigFile' </br>cfvz stands for: create file verbose zip"
    url: ''
    date: 2014-12-19
    state: ''
  -
    tag: bash
    title: 'tail -f development.log | grep user'
    subtitle: ''
    body: 'live read of the file in question, ex- development.log. Using grep I can look for log enteries that only have user in them.'
    url: ''
    date: 2014-12-02
    state: ''
  -
    tag: bash
    title: 'find ./source/notes ./source/blog -type f -print0 | xargs -0 stat -f "%m %N" | sort -rn | head -3 | cut -f2- -d" "'
    subtitle: ''
    body: 'Recursively find the last updated files'
    url: ''
    date: 2014-11-29
    state: ''
  -
    tag: bash
    title: 'alias gpom="git pull origin master"'
    subtitle: ''
    body: save yourself from typing sooo much
    url: ''
    date: 2014-12-02
    state: ''
  -
    tag: bash
    title: copr
    subtitle: ''
    body: 'this'
    url: ''
    date: 2014-12-02
    state: ''
  -
    tag: git
    title: 'gcob'
    subtitle: ''
    body: 'git checkout branch [branch name]'
    url: ''
    date: 2014-12-02
    state: ''
  -
    tag: git
    title: 'git log -S [word]'
    subtitle: ''
    body: 'the -S is a regex that will look for the word used in the log'
    url: ''
    date: 2014-12-02
    state: ''
  -
    tag: git
    title: 'git log [file name]'
    subtitle: ''
    body: 'shows changes only for file name'
    url: ''
    date: 2014-12-02
    state: ''
  -
    tag: bundle
    title: 'bundle open [gem]'
    subtitle: ''
    body: 'will open the gem in question'
    url: ''
    date: 2014-11-02
    state: ''
